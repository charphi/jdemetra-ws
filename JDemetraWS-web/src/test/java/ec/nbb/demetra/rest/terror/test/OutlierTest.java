/*
 * Copyright 2015 National Bank of Belgium
 *
 * Licensed under the EUPL, Version 1.1 or â€“ as soon they will be approved 
 * by the European Commission - subsequent versions of the EUPL (the "Licence");
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at:
 * 
 * http://ec.europa.eu/idabc/eupl
 * 
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the Licence is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and 
 * limitations under the Licence.
 */
package ec.nbb.demetra.rest.terror.test;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.google.common.base.Stopwatch;
import ec.nbb.demetra.json.JsonTsCollection;
import ec.nbb.demetra.model.outlier.OutlierRequest;
import ec.nbb.demetra.model.outlier.OutlierResults;
import ec.nbb.demetra.model.outlier.ShadowOutlier;
import ec.nbb.demetra.model.outlier.ShadowTs;
import ec.tss.TsCollection;
import ec.tss.TsCollectionInformation;
import ec.tss.TsFactory;
import ec.tss.TsInformationType;
import ec.tstoolkit.timeseries.TsAggregationType;
import ec.tstoolkit.timeseries.simplets.TsData;
import ec.tstoolkit.timeseries.simplets.TsFrequency;
import io.swagger.util.Json;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.MediaType;
import org.glassfish.jersey.client.JerseyClient;
import org.glassfish.jersey.client.JerseyClientBuilder;
import org.glassfish.jersey.client.JerseyWebTarget;
import org.glassfish.jersey.message.GZipEncoder;
import org.junit.Test;

/**
 *
 * @author Mats Maggi
 */
public class OutlierTest {

    @Test
    public void serializeTest() {
        try {
            OutlierRequest input = new OutlierRequest();
            TsCollection coll = TsFactory.instance.createTsCollection();
            for (int i = 0; i < 1; i++) {
                TsData tsdata = TsData.random(TsFrequency.Monthly);
                coll.add(TsFactory.instance.createTs("Series" + i, null, tsdata));
            }

            TsCollectionInformation infos = new TsCollectionInformation(coll, TsInformationType.All);
            JsonTsCollection jsonCollection = new JsonTsCollection();
            jsonCollection.from(infos);

            input.setTransformation("None");
            input.setSeries(jsonCollection);
            input.setSpecification("TR4");
            input.setShowAO(true);
            input.setShowLS(true);
            input.setShowTC(true);
            input.setShowSO(true);
            input.setCriticalValue(2);

            String json = "{\"series\":{\"metadata\":null,\"name\":\"\",\"source\":null,\"identifier\":null,\"tslist\":[{\"freq\":12,\"firstYear\":1981,\"firstPeriod\":6,\"data\":[100.59264332508161,100.52108956744006,100.94476722178315,100.84765798892043,100.4818014751866,100.17633474129676,100.46293477273193,100.88833393567103,101.29467825152044,101.27556521760812,101.37977669532776,101.8703066615535,101.59642687154299,102.0548061898334,102.51795259226459,102.68776924733605,103.0517518468692,102.97698831467373,103.15210763075046,103.27347303582503,103.12493494899192,102.636882229866,102.9325128742755,102.81070619969118,102.65097206599839,102.92694207598736,102.88172251208337,103.28621557883538,103.77101957274695,103.83778041893571,103.43358229101598,103.6582459594954,103.9051581805886,103.45950144532343,103.50943498695167,103.90520310700663,104.33794770369069,104.82153021933907,104.93703844417905,105.15318669349321,104.74236912776882,104.28389412458613,104.23853661962472,104.0797849423476,103.69052776303127,103.39713493514066,103.06980561980706,102.9820736968197,103.01992643866113,102.6061608803561,102.50963419087644,102.40372159561969,101.9672080528161,102.01038373769383,102.09849244930969,102.16446685009744,102.37201449989293,102.73342847274652,103.13809244625855,103.15000148824674,103.11701160630885,103.42555150990424,103.40955086713282,103.42647597411214,103.43118964059316,103.14565866812396,103.27472673105707,103.26642004670408,102.86726502548004,102.47247500920861,102.21722590323303,102.6368646979851,102.79538016929101,102.3009860172671,102.38163966568379,102.73084613454368,102.25932782583467,102.51574345668882,102.70681559379592,102.34527372731053,102.14320955079411,101.72200852082636,101.94634699733363,101.44635250317403,101.92077999204534,101.5839922357646,101.35201121611145,101.24336469907652,100.93172484467081,101.19164377890698,101.1885868235692,101.63763545472537,101.27377412770922,101.37853763372726,101.67633675572135,102.15093466512785,102.14186196677055,102.16841427445799,102.54545665031685,102.49139953850823,102.91050948267117,102.66184074797047,102.25995706389989,101.9103024403499,101.56823022043895,101.81227474957467,102.25177283477014,102.5646332390121,102.39803495369351,102.80753934420333,102.32437493699253,102.35351772625572,102.1810481031022,102.29334549296571,101.86379739443122,102.26595157101521,101.8058381901084,101.57503568884998,101.7587860364376,101.2881933567423,101.11931229564154,101.33716423412851,101.10572601473616,101.49643090365939,101.2809274206028,101.45287846212453,100.98311126725442,101.22901181977343,100.90553171822944,101.2413202138211,100.94958223370152,101.31761218703723,101.02636348760565,101.19642735978718,101.57397638039488,101.38320660012677,101.50360918310261,101.87958378668104,102.3704122292896,102.29559820582485,102.07044874733666,102.46653834571534,102.11115804141902,102.17956924829964,101.87270200360953,101.49089456399327,101.74992472320072,101.95142060603143,102.2450301850823,101.75725809344675,102.23326620260357,102.41178291908265,102.70114416171884,102.33182168063045,102.43297055810592,102.52910269658355,102.82262362448127,103.08176591131007,103.42268206285318,103.84813324484868,104.03576192697412,103.55235925842929,103.47250647413546,103.07409353805376,103.29331606466712,103.16705115751505,103.5710212858171,103.94089717251418,103.55316460241625,103.93617053547419,104.12993762394211,104.59599923550168,104.7936530957623,105.18906460838737,104.90764189189703,105.04996058917287,105.25084292841382,105.42764354449233,105.22898324505157,104.8707871461076,104.7309686323927,104.36133214840397,104.40496643215027,104.37646568293988,104.36715692143729,104.64937229132596,104.99246026444425,105.21888893812574,105.17786382351713,104.97126886244122,105.30563803579447,105.58353851103567,105.37054509477863,104.89492591901131,104.52262910227529,104.37687806748173,104.6427922413359,104.73968196315262,104.94777968320363,104.86239784551297,104.88953725268996,105.36301985778944,105.61699632767306,105.36164755359303,105.85395830908668,105.6602007875565,105.59587645722097,105.98339596702827,105.48640295116083,105.6804517641599,106.14271881816,106.0072640277257,106.22498615710566,105.75662201728532,105.51605004737837,105.65279218369439,105.20851750108952,105.04241582182541,104.72400370031268,104.63592335897667,104.70206571515591,104.47740876356453,104.06574534646091,104.27730975007195,103.88277741055867,103.58005833150416,104.02814875021322,104.10568420838115,103.72353336171783,103.72783136310521,104.09909841121252,104.01977723621442,104.14964777992668,103.84638842043437,103.46711784143972,103.25890477618732,103.05409372683314,102.82148833691997,102.52050531090256,102.810404877469,103.26467314131985,103.59290646047768,103.66279574382457,103.57655887393695,103.2871402048222,102.91419597385021,103.35016177350566,103.7594967211862,103.72653413423348,103.29056422401773,103.55531724536445,103.62485714239382,103.83988083027626,103.76448463784313,104.19659261397845,104.19864965704002,103.82198196796874,104.12991944572259,104.56511451028675,104.66184870224903,104.29722669832204,103.94618998230142,103.56244086649325,103.35873942161152,103.20923244887247,103.51659828758282,103.75057773226972,103.55292964444705,103.99164987778926,103.91987756263039,103.94103598974804,103.47424529444255,103.6926520418528,103.35942911010686,103.43447332085205,103.92543365171792,103.73746786137383,103.65108900516009,103.19251079619826,102.8847133722531,103.37281769664038,103.72986076862001,103.30351436431083,103.27373101380468,103.66926188606394,103.74464822822343,104.21948648643675,104.48540991966838,104.38728257764913,104.75252854418261,104.51672772345941,104.50751122831997,104.16538549457536,104.34551546099246,104.49359533246543,104.66046494112511,104.48862952941988,104.86808117114836,104.88951225843121,105.21717548417958,104.8687711153041,105.33792806714955,105.51536074591897,105.61305729814606,105.73764468192792,105.89063220964564,105.7515328977349,105.71151443282002,105.84849101384748,105.65581581934396,105.82120398906763,105.78844187893665,105.62069292063588,105.56344905084563,105.60784507865557,105.66409753390323,105.976780390808,105.79872942755144,105.68259733637188,105.86686971701559,105.93162748866825,105.59774277815386,105.26389384826045,104.98604904264519,104.62747884202656,104.92877007625165,105.17363288201717,105.58470157049013,105.78981536868956,105.46067223645083,105.60628241951115,105.32413700463441,104.83309783395599,105.20525873349428,104.81452681330843,104.42326608686191,104.19711082827762,104.4599253881633,104.76245442424337,104.36435073226474,104.06897088436496,104.29513315533808,104.5298285660764,104.98626323354313,104.5678592504168,104.95349174508142,104.89368492294282,104.90239286508417,104.86419374066116,105.2783111745764,105.19135447056514,105.66776370639332,105.6972627807433,105.79448845272141,105.40702402285444,105.42376134382921,105.47031137734034,105.44850829129696,105.54711524155402,105.99410506071776,105.66469040211099,105.4021539698167,104.90308817646047,104.717347405103,104.84995884873639,104.79124792042741,104.86875700779662,104.80423541580477,105.19976384610679,105.1313720138006,104.70784323258833,104.82772516954194,105.27891306910486,105.20205267609902,105.18128532114287,105.21430566091337,105.07030218770906,104.89433970461958,105.36777442859908,105.43255908409748,105.88626282164218,105.789054888724,105.47009186743544,105.09356058631184,105.08245621699925,105.26924261219843,105.01908703549523,105.512804140283,105.48865346963211,105.88551472437388,105.79155306343242,105.55983011035333,105.3146154909309,105.61205031672755,106.07283291611073,105.96462561050618,106.10581393674906,105.67898388349387,105.74472033355954,105.7841710308461,106.23791930528436,105.96879563878579,106.18910692894578,106.58321315448816,106.57582254612505,106.64510374493571,106.29287165028157,106.17546046145988,106.4074544125111,106.86695088490399,107.04470828600304,106.6299160872494,106.71981926751474,106.25527556447129,106.45494357775878,106.79699131157673,106.43947073770326,106.34576435964641,105.92991088380123,105.97537453120982,105.53712079545838,105.70869152392032,105.91811360840046,105.64837096008326,106.02119782619168,105.8666704199664,105.74123744490774,105.59257305482484,105.94294594537882,105.72046463214129,106.15405226760615,106.22727369478528,105.73109343612626,106.02613631266841,106.468381918506,106.95499222531596,106.59220829435795,106.67884589124547,107.15261437118133,107.56684767026769,107.47860675342874,107.27455916479664,106.80467460201622,106.67628377360323,106.36408290998435,106.76576691275348,106.41798925065072,106.7258274671761,106.4037881463173,106.12607640224137,106.04173465300877,106.5091454146027,106.11330440414854,105.9161963272052,106.40357910464463,106.48965250376024,106.10832727834736,105.62540273262094,105.94020449533811,105.60232107035598,105.32540348020883,105.77304840011655,106.09312549740385,105.8221428194461,106.12085200101403,106.1190572555095,105.79971041341364,105.695901828556,105.34433841784862,105.0756317256133,104.96685296606952,105.38853211340458,105.53056958874701,105.65959354270177,105.48244422317187,105.7163540591452,105.87222910828922,106.20087668351302,106.1226496656024,106.25190956253974,105.75458279415354,105.65269650956105,105.6760103406742,106.0139502050204,106.47215066253028,106.85782990837083,106.85355451684349,106.62637091746899,106.43546244745936,106.63825893969997,106.21243286588015,106.26652778010777,105.83619314450551,106.21715380526597,106.51407035163297,106.35142970522045,106.49690886659306,106.37780113106837,106.79146704442964,106.85475279585327],\"metaData\":null,\"name\":\"Series0\",\"source\":null,\"identifier\":null}]},\"criticalValue\":2.0,\"showAO\":true,\"showLS\":true,\"showTC\":true,\"showSO\":true,\"transformation\":\"None\",\"specification\":\"TR4\"}";
            OutlierRequest r = Json.mapper().readValue(json, OutlierRequest.class);
            System.out.println(r.getSpecification());
        } catch (JsonProcessingException ex) {
            Logger.getLogger(OutlierTest.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(OutlierTest.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Test
    public void outlierTest() {
        OutlierRequest input = new OutlierRequest();
        TsCollection coll = TsFactory.instance.createTsCollection();
        for (int i = 0; i < 10; i++) {
            TsData tsdata = TsData.random(TsFrequency.Monthly);
            coll.add(TsFactory.instance.createTs("Series" + i, null, tsdata));
        }

        TsCollectionInformation infos = new TsCollectionInformation(coll, TsInformationType.All);
        JsonTsCollection jsonCollection = new JsonTsCollection();
        jsonCollection.from(infos);

        input.setTransformation("None");
        input.setSeries(jsonCollection);
        input.setSpecification("TR4");
        input.setShowAO(true);
        input.setShowLS(true);
        input.setShowTC(true);
        input.setShowSO(true);
        input.setCriticalValue(2);

        Stopwatch stopwatch = Stopwatch.createStarted();

        Client client = ClientBuilder.newClient();
        //WebResource service = client.resource("http://srvdqrdd2.nbb.local:9998/demetra/api");
        WebTarget service = client.target("http://localhost:8080/demetra/api");

        OutlierResults resp = service.path("outlier")
                .request(MediaType.APPLICATION_JSON)
                .post(Entity.entity(input, MediaType.APPLICATION_JSON), OutlierResults.class);
        System.out.println(stopwatch.stop().toString());
    }

    @Test
    public void outlierNewTest() {
        ShadowTs ts = new ShadowTs();
        ts.setAggregationMethod(TsAggregationType.None);
        ts.setName("Blabla");
        ts.setFreq(12);

        double[] values = new double[24];
        int[] periods = new int[24];
        for (int i = 0; i < 24; i++) {
            periods[i] = 2010 * 12 + i;

            if (i == 5) {
                values[i] = 2400;
            } else {
                values[i] = i;
            }
        }
        ts.setValues(values);
        ts.setPeriods(periods);

        JerseyClientBuilder jcb = new JerseyClientBuilder();
        jcb.register(GZipEncoder.class);
        JerseyClient jc = jcb.build();

        Stopwatch watch = Stopwatch.createStarted();
        JerseyWebTarget jwt = jc.target("http://localhost:9998/demetra/api");
        ShadowOutlier[] resp = jwt.path("outlier/new")
                .request(MediaType.APPLICATION_JSON)
                .acceptEncoding("gzip")
                .post(Entity.entity(ts, MediaType.APPLICATION_JSON), ShadowOutlier[].class);
        System.out.println(resp.length);
    }
}
